(globalThis.TURBOPACK || (globalThis.TURBOPACK = [])).push([typeof document === "object" ? document.currentScript : undefined,
"[project]/node_modules/assistant-stream/dist/core/AssistantStream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/AssistantStream.ts
__turbopack_context__.s([
    "AssistantStream",
    ()=>AssistantStream
]);
var AssistantStream = {
    toResponse (stream, transformer) {
        var _transformer_headers;
        return new Response(AssistantStream.toByteStream(stream, transformer), {
            headers: (_transformer_headers = transformer.headers) !== null && _transformer_headers !== void 0 ? _transformer_headers : {}
        });
    },
    fromResponse (response, transformer) {
        return AssistantStream.fromByteStream(response.body, transformer);
    },
    toByteStream (stream, transformer) {
        return stream.pipeThrough(transformer);
    },
    fromByteStream (readable, transformer) {
        return readable.pipeThrough(transformer);
    }
};
;
 //# sourceMappingURL=AssistantStream.js.map
}),
"[project]/node_modules/assistant-stream/dist/utils/promiseWithResolvers.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/utils/promiseWithResolvers.ts
__turbopack_context__.s([
    "promiseWithResolvers",
    ()=>promiseWithResolvers
]);
var promiseWithResolvers = function() {
    let resolve;
    let reject;
    const promise = new Promise((res, rej)=>{
        resolve = res;
        reject = rej;
    });
    if (!resolve || !reject) throw new Error("Failed to create promise");
    return {
        promise,
        resolve,
        reject
    };
};
;
 //# sourceMappingURL=promiseWithResolvers.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/utils/stream/merge.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/utils/stream/merge.ts
__turbopack_context__.s([
    "createMergeStream",
    ()=>createMergeStream
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$promiseWithResolvers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/utils/promiseWithResolvers.js [app-client] (ecmascript)");
;
var createMergeStream = ()=>{
    const list = [];
    let sealed = false;
    let controller;
    let currentPull;
    const handlePull = (item)=>{
        if (!item.promise) {
            item.promise = item.reader.read().then((param)=>{
                let { done, value } = param;
                item.promise = void 0;
                if (done) {
                    list.splice(list.indexOf(item), 1);
                    if (sealed && list.length === 0) {
                        controller.close();
                    }
                } else {
                    controller.enqueue(value);
                }
                currentPull === null || currentPull === void 0 ? void 0 : currentPull.resolve();
                currentPull = void 0;
            }).catch((e)=>{
                console.error(e);
                list.forEach((item2)=>{
                    item2.reader.cancel();
                });
                list.length = 0;
                controller.error(e);
                currentPull === null || currentPull === void 0 ? void 0 : currentPull.reject(e);
                currentPull = void 0;
            });
        }
    };
    const readable = new ReadableStream({
        start (c) {
            controller = c;
        },
        pull () {
            currentPull = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$promiseWithResolvers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["promiseWithResolvers"])();
            list.forEach((item)=>{
                handlePull(item);
            });
            return currentPull.promise;
        },
        cancel () {
            list.forEach((item)=>{
                item.reader.cancel();
            });
            list.length = 0;
        }
    });
    return {
        readable,
        isSealed () {
            return sealed;
        },
        seal () {
            sealed = true;
            if (list.length === 0) controller.close();
        },
        addStream (stream) {
            if (sealed) throw new Error("Cannot add streams after the run callback has settled.");
            const item = {
                reader: stream.getReader()
            };
            list.push(item);
            handlePull(item);
        },
        enqueue (chunk) {
            this.addStream(new ReadableStream({
                start (c) {
                    c.enqueue(chunk);
                    c.close();
                }
            }));
        }
    };
};
;
 //# sourceMappingURL=merge.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/modules/text.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/modules/text.ts
__turbopack_context__.s([
    "createTextStream",
    ()=>createTextStream,
    "createTextStreamController",
    ()=>createTextStreamController
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
;
var TextStreamControllerImpl = class {
    append(textDelta) {
        this._controller.enqueue({
            type: "text-delta",
            path: [],
            textDelta
        });
        return this;
    }
    close() {
        if (this._isClosed) return;
        this._isClosed = true;
        this._controller.enqueue({
            type: "part-finish",
            path: []
        });
        this._controller.close();
    }
    constructor(controller){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "_controller", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "_isClosed", false);
        this._controller = controller;
    }
};
var createTextStream = (readable)=>{
    return new ReadableStream({
        start (c) {
            var _readable_start;
            return (_readable_start = readable.start) === null || _readable_start === void 0 ? void 0 : _readable_start.call(readable, new TextStreamControllerImpl(c));
        },
        pull (c) {
            var _readable_pull;
            return (_readable_pull = readable.pull) === null || _readable_pull === void 0 ? void 0 : _readable_pull.call(readable, new TextStreamControllerImpl(c));
        },
        cancel (c) {
            var _readable_cancel;
            return (_readable_cancel = readable.cancel) === null || _readable_cancel === void 0 ? void 0 : _readable_cancel.call(readable, c);
        }
    });
};
var createTextStreamController = ()=>{
    let controller;
    const stream = createTextStream({
        start (c) {
            controller = c;
        }
    });
    return [
        stream,
        controller
    ];
};
;
 //# sourceMappingURL=text.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/modules/tool-call.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/modules/tool-call.ts
__turbopack_context__.s([
    "createToolCallStream",
    ()=>createToolCallStream,
    "createToolCallStreamController",
    ()=>createToolCallStreamController
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$modules$2f$text$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/modules/text.js [app-client] (ecmascript)");
;
;
var ToolCallStreamControllerImpl = class {
    get argsText() {
        return this._argsTextController;
    }
    async setResponse(response) {
        this._argsTextController.close();
        await Promise.resolve();
        var _response_isError;
        this._controller.enqueue({
            type: "result",
            path: [],
            ...response.artifact !== void 0 ? {
                artifact: response.artifact
            } : {},
            result: response.result,
            isError: (_response_isError = response.isError) !== null && _response_isError !== void 0 ? _response_isError : false
        });
    }
    async close() {
        if (this._isClosed) return;
        this._isClosed = true;
        this._argsTextController.close();
        await this._mergeTask;
        this._controller.enqueue({
            type: "part-finish",
            path: []
        });
        this._controller.close();
    }
    constructor(_controller){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "_isClosed", false);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "_mergeTask", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "_argsTextController", void 0);
        this._controller = _controller;
        const stream = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$modules$2f$text$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTextStream"])({
            start: (c)=>{
                this._argsTextController = c;
            }
        });
        let hasArgsText = false;
        this._mergeTask = stream.pipeTo(new WritableStream({
            write: (chunk)=>{
                switch(chunk.type){
                    case "text-delta":
                        hasArgsText = true;
                        this._controller.enqueue(chunk);
                        break;
                    case "part-finish":
                        if (!hasArgsText) {
                            this._controller.enqueue({
                                type: "text-delta",
                                textDelta: "{}",
                                path: []
                            });
                        }
                        this._controller.enqueue({
                            type: "tool-call-args-text-finish",
                            path: []
                        });
                        break;
                    default:
                        throw new Error("Unexpected chunk type: ".concat(chunk.type));
                }
            }
        }));
    }
};
var createToolCallStream = (readable)=>{
    return new ReadableStream({
        start (c) {
            var _readable_start;
            return (_readable_start = readable.start) === null || _readable_start === void 0 ? void 0 : _readable_start.call(readable, new ToolCallStreamControllerImpl(c));
        },
        pull (c) {
            var _readable_pull;
            return (_readable_pull = readable.pull) === null || _readable_pull === void 0 ? void 0 : _readable_pull.call(readable, new ToolCallStreamControllerImpl(c));
        },
        cancel (c) {
            var _readable_cancel;
            return (_readable_cancel = readable.cancel) === null || _readable_cancel === void 0 ? void 0 : _readable_cancel.call(readable, c);
        }
    });
};
var createToolCallStreamController = ()=>{
    let controller;
    const stream = createToolCallStream({
        start (c) {
            controller = c;
        }
    });
    return [
        stream,
        controller
    ];
};
;
 //# sourceMappingURL=tool-call.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/utils/Counter.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/utils/Counter.ts
__turbopack_context__.s([
    "Counter",
    ()=>Counter
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
;
var Counter = class {
    up() {
        return ++this.value;
    }
    constructor(){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "value", -1);
    }
};
;
 //# sourceMappingURL=Counter.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/utils/stream/path-utils.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/utils/stream/path-utils.ts
__turbopack_context__.s([
    "PathAppendDecoder",
    ()=>PathAppendDecoder,
    "PathAppendEncoder",
    ()=>PathAppendEncoder,
    "PathMergeEncoder",
    ()=>PathMergeEncoder
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$Counter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/Counter.js [app-client] (ecmascript)");
;
var PathAppendEncoder = class extends TransformStream {
    constructor(idx){
        super({
            transform (chunk, controller) {
                controller.enqueue({
                    ...chunk,
                    path: [
                        idx,
                        ...chunk.path
                    ]
                });
            }
        });
    }
};
var PathAppendDecoder = class extends TransformStream {
    constructor(idx){
        super({
            transform (chunk, controller) {
                const { path: [idx2, ...path] } = chunk;
                if (idx !== idx2) throw new Error("Path mismatch: expected ".concat(idx, ", got ").concat(idx2));
                controller.enqueue({
                    ...chunk,
                    path
                });
            }
        });
    }
};
var PathMergeEncoder = class extends TransformStream {
    constructor(counter){
        const innerCounter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$Counter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Counter"]();
        const mapping = /* @__PURE__ */ new Map();
        super({
            transform (chunk, controller) {
                if (chunk.type === "part-start" && chunk.path.length === 0) {
                    mapping.set(innerCounter.up(), counter.up());
                }
                const [idx, ...path] = chunk.path;
                if (idx === void 0) {
                    controller.enqueue(chunk);
                    return;
                }
                const mappedIdx = mapping.get(idx);
                if (mappedIdx === void 0) throw new Error("Path not found");
                controller.enqueue({
                    ...chunk,
                    path: [
                        mappedIdx,
                        ...path
                    ]
                });
            }
        });
    }
};
;
 //# sourceMappingURL=path-utils.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/utils/stream/PipeableTransformStream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/utils/stream/PipeableTransformStream.ts
__turbopack_context__.s([
    "PipeableTransformStream",
    ()=>PipeableTransformStream
]);
var PipeableTransformStream = class extends TransformStream {
    constructor(transform){
        super();
        const readable = transform(super.readable);
        Object.defineProperty(this, "readable", {
            value: readable,
            writable: false
        });
    }
};
;
 //# sourceMappingURL=PipeableTransformStream.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/serialization/data-stream/chunk-types.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/serialization/data-stream/chunk-types.ts
__turbopack_context__.s([
    "DataStreamStreamChunkType",
    ()=>DataStreamStreamChunkType
]);
var DataStreamStreamChunkType = /* @__PURE__ */ ((DataStreamStreamChunkType2)=>{
    DataStreamStreamChunkType2["TextDelta"] = "0";
    DataStreamStreamChunkType2["Data"] = "2";
    DataStreamStreamChunkType2["Error"] = "3";
    DataStreamStreamChunkType2["Annotation"] = "8";
    DataStreamStreamChunkType2["ToolCall"] = "9";
    DataStreamStreamChunkType2["ToolCallResult"] = "a";
    DataStreamStreamChunkType2["StartToolCall"] = "b";
    DataStreamStreamChunkType2["ToolCallArgsTextDelta"] = "c";
    DataStreamStreamChunkType2["FinishMessage"] = "d";
    DataStreamStreamChunkType2["FinishStep"] = "e";
    DataStreamStreamChunkType2["StartStep"] = "f";
    DataStreamStreamChunkType2["ReasoningDelta"] = "g";
    DataStreamStreamChunkType2["Source"] = "h";
    DataStreamStreamChunkType2["RedactedReasoning"] = "i";
    DataStreamStreamChunkType2["ReasoningSignature"] = "j";
    DataStreamStreamChunkType2["File"] = "k";
    DataStreamStreamChunkType2["AuiUpdateStateOperations"] = "aui-state";
    DataStreamStreamChunkType2["AuiTextDelta"] = "aui-text-delta";
    DataStreamStreamChunkType2["AuiReasoningDelta"] = "aui-reasoning-delta";
    return DataStreamStreamChunkType2;
})(DataStreamStreamChunkType || {});
;
 //# sourceMappingURL=chunk-types.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/utils/stream/LineDecoderStream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/utils/stream/LineDecoderStream.ts
__turbopack_context__.s([
    "LineDecoderStream",
    ()=>LineDecoderStream
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
;
var LineDecoderStream = class extends TransformStream {
    constructor(){
        super({
            transform: (chunk, controller)=>{
                this.buffer += chunk;
                const lines = this.buffer.split("\n");
                for(let i = 0; i < lines.length - 1; i++){
                    controller.enqueue(lines[i]);
                }
                this.buffer = lines[lines.length - 1] || "";
            },
            flush: ()=>{
                if (this.buffer) {
                    throw new Error('Stream ended with an incomplete line: "'.concat(this.buffer, '"'));
                }
            }
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "buffer", "");
    }
};
;
 //# sourceMappingURL=LineDecoderStream.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/serialization/data-stream/serialization.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/serialization/data-stream/serialization.ts
__turbopack_context__.s([
    "DataStreamChunkDecoder",
    ()=>DataStreamChunkDecoder,
    "DataStreamChunkEncoder",
    ()=>DataStreamChunkEncoder
]);
var DataStreamChunkEncoder = class extends TransformStream {
    constructor(){
        super({
            transform: (chunk, controller)=>{
                controller.enqueue("".concat(chunk.type, ":").concat(JSON.stringify(chunk.value), "\n"));
            }
        });
    }
};
var DataStreamChunkDecoder = class extends TransformStream {
    constructor(){
        super({
            transform: (chunk, controller)=>{
                const index = chunk.indexOf(":");
                if (index === -1) throw new Error("Invalid stream part");
                controller.enqueue({
                    type: chunk.slice(0, index),
                    value: JSON.parse(chunk.slice(index + 1))
                });
            }
        });
    }
};
;
 //# sourceMappingURL=serialization.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/utils/stream/AssistantMetaTransformStream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/utils/stream/AssistantMetaTransformStream.ts
__turbopack_context__.s([
    "AssistantMetaTransformStream",
    ()=>AssistantMetaTransformStream
]);
var AssistantMetaTransformStream = class extends TransformStream {
    constructor(){
        const parts = [];
        super({
            transform (chunk, controller) {
                if (chunk.type === "part-start") {
                    if (chunk.path.length !== 0) {
                        controller.error(new Error("Nested parts are not supported"));
                        return;
                    }
                    parts.push(chunk.part);
                    controller.enqueue(chunk);
                    return;
                }
                if (chunk.type === "text-delta" || chunk.type === "result" || chunk.type === "part-finish" || chunk.type === "tool-call-args-text-finish") {
                    if (chunk.path.length !== 1) {
                        controller.error(new Error("".concat(chunk.type, " chunks must have a path of length 1")));
                        return;
                    }
                    const idx = chunk.path[0];
                    if (idx < 0 || idx >= parts.length) {
                        controller.error(new Error("Invalid path index: ".concat(idx)));
                        return;
                    }
                    const part = parts[idx];
                    controller.enqueue({
                        ...chunk,
                        meta: part
                    });
                    return;
                }
                controller.enqueue(chunk);
            }
        });
    }
};
;
 //# sourceMappingURL=AssistantMetaTransformStream.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/serialization/data-stream/DataStream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/serialization/data-stream/DataStream.ts
__turbopack_context__.s([
    "DataStreamDecoder",
    ()=>DataStreamDecoder,
    "DataStreamEncoder",
    ()=>DataStreamEncoder
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$AssistantTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/stream/AssistantTransformStream.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$PipeableTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/stream/PipeableTransformStream.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/serialization/data-stream/chunk-types.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$LineDecoderStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/stream/LineDecoderStream.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$serialization$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/serialization/data-stream/serialization.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$AssistantMetaTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/stream/AssistantMetaTransformStream.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
var DataStreamEncoder = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$PipeableTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PipeableTransformStream"] {
    constructor(){
        super((readable)=>{
            const transform = new TransformStream({
                transform (chunk, controller) {
                    const type = chunk.type;
                    switch(type){
                        case "part-start":
                            {
                                const part = chunk.part;
                                if (part.type === "tool-call") {
                                    const { type: type2, ...value } = part;
                                    controller.enqueue({
                                        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].StartToolCall,
                                        value
                                    });
                                }
                                if (part.type === "source") {
                                    const { type: type2, ...value } = part;
                                    controller.enqueue({
                                        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].Source,
                                        value
                                    });
                                }
                                break;
                            }
                        case "text-delta":
                            {
                                const part = chunk.meta;
                                switch(part.type){
                                    case "text":
                                        {
                                            if (part.parentId) {
                                                controller.enqueue({
                                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].AuiTextDelta,
                                                    value: {
                                                        textDelta: chunk.textDelta,
                                                        parentId: part.parentId
                                                    }
                                                });
                                            } else {
                                                controller.enqueue({
                                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].TextDelta,
                                                    value: chunk.textDelta
                                                });
                                            }
                                            break;
                                        }
                                    case "reasoning":
                                        {
                                            if (part.parentId) {
                                                controller.enqueue({
                                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].AuiReasoningDelta,
                                                    value: {
                                                        reasoningDelta: chunk.textDelta,
                                                        parentId: part.parentId
                                                    }
                                                });
                                            } else {
                                                controller.enqueue({
                                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].ReasoningDelta,
                                                    value: chunk.textDelta
                                                });
                                            }
                                            break;
                                        }
                                    case "tool-call":
                                        {
                                            controller.enqueue({
                                                type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].ToolCallArgsTextDelta,
                                                value: {
                                                    toolCallId: part.toolCallId,
                                                    argsTextDelta: chunk.textDelta
                                                }
                                            });
                                            break;
                                        }
                                    default:
                                        throw new Error("Unsupported part type for text-delta: ".concat(part.type));
                                }
                                break;
                            }
                        case "result":
                            {
                                const part = chunk.meta;
                                if (part.type !== "tool-call") {
                                    throw new Error("Result chunk on non-tool-call part not supported: ".concat(part.type));
                                }
                                controller.enqueue({
                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].ToolCallResult,
                                    value: {
                                        toolCallId: part.toolCallId,
                                        result: chunk.result,
                                        artifact: chunk.artifact,
                                        ...chunk.isError ? {
                                            isError: chunk.isError
                                        } : {}
                                    }
                                });
                                break;
                            }
                        case "step-start":
                            {
                                const { type: type2, ...value } = chunk;
                                controller.enqueue({
                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].StartStep,
                                    value
                                });
                                break;
                            }
                        case "step-finish":
                            {
                                const { type: type2, ...value } = chunk;
                                controller.enqueue({
                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].FinishStep,
                                    value
                                });
                                break;
                            }
                        case "message-finish":
                            {
                                const { type: type2, ...value } = chunk;
                                controller.enqueue({
                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].FinishMessage,
                                    value
                                });
                                break;
                            }
                        case "error":
                            {
                                controller.enqueue({
                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].Error,
                                    value: chunk.error
                                });
                                break;
                            }
                        case "annotations":
                            {
                                controller.enqueue({
                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].Annotation,
                                    value: chunk.annotations
                                });
                                break;
                            }
                        case "data":
                            {
                                controller.enqueue({
                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].Data,
                                    value: chunk.data
                                });
                                break;
                            }
                        case "update-state":
                            {
                                controller.enqueue({
                                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].AuiUpdateStateOperations,
                                    value: chunk.operations
                                });
                                break;
                            }
                        // TODO ignore for now
                        // in the future, we should create a handler that waits for text parts to finish before continuing
                        case "tool-call-args-text-finish":
                        case "part-finish":
                            break;
                        default:
                            {
                                const exhaustiveCheck = type;
                                throw new Error("Unsupported chunk type: ".concat(exhaustiveCheck));
                            }
                    }
                }
            });
            return readable.pipeThrough(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$AssistantMetaTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AssistantMetaTransformStream"]()).pipeThrough(transform).pipeThrough(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$serialization$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamChunkEncoder"]()).pipeThrough(new TextEncoderStream());
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "headers", new Headers({
            "Content-Type": "text/plain; charset=utf-8",
            "x-vercel-ai-data-stream": "v1"
        }));
    }
};
var TOOL_CALL_ARGS_CLOSING_CHUNKS = [
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].StartToolCall,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].ToolCall,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].TextDelta,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].ReasoningDelta,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].Source,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].Error,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].FinishStep,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].FinishMessage,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].AuiTextDelta,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].AuiReasoningDelta
];
var DataStreamDecoder = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$PipeableTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PipeableTransformStream"] {
    constructor(){
        super((readable)=>{
            const toolCallControllers = /* @__PURE__ */ new Map();
            let activeToolCallArgsText;
            const transform = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$AssistantTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AssistantTransformStream"]({
                transform (chunk, controller) {
                    const { type, value } = chunk;
                    if (TOOL_CALL_ARGS_CLOSING_CHUNKS.includes(type)) {
                        activeToolCallArgsText === null || activeToolCallArgsText === void 0 ? void 0 : activeToolCallArgsText.close();
                        activeToolCallArgsText = void 0;
                    }
                    switch(type){
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].ReasoningDelta:
                            controller.appendReasoning(value);
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].TextDelta:
                            controller.appendText(value);
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].AuiTextDelta:
                            controller.withParentId(value.parentId).appendText(value.textDelta);
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].AuiReasoningDelta:
                            controller.withParentId(value.parentId).appendReasoning(value.reasoningDelta);
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].StartToolCall:
                            {
                                const { toolCallId, toolName, parentId } = value;
                                const ctrl = parentId ? controller.withParentId(parentId) : controller;
                                const toolCallController = ctrl.addToolCallPart({
                                    toolCallId,
                                    toolName
                                });
                                toolCallControllers.set(toolCallId, toolCallController);
                                activeToolCallArgsText = toolCallController.argsText;
                                break;
                            }
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].ToolCallArgsTextDelta:
                            {
                                const { toolCallId, argsTextDelta } = value;
                                const toolCallController = toolCallControllers.get(toolCallId);
                                if (!toolCallController) throw new Error("Encountered tool call with unknown id: " + toolCallId);
                                toolCallController.argsText.append(argsTextDelta);
                                break;
                            }
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].ToolCallResult:
                            {
                                const { toolCallId, artifact, result, isError } = value;
                                const toolCallController = toolCallControllers.get(toolCallId);
                                if (!toolCallController) throw new Error("Encountered tool call result with unknown id: " + toolCallId);
                                toolCallController.setResponse({
                                    artifact,
                                    result,
                                    isError
                                });
                                break;
                            }
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].ToolCall:
                            {
                                const { toolCallId, toolName, args } = value;
                                let toolCallController = toolCallControllers.get(toolCallId);
                                if (toolCallController) {
                                    toolCallController.argsText.close();
                                } else {
                                    toolCallController = controller.addToolCallPart({
                                        toolCallId,
                                        toolName,
                                        args
                                    });
                                    toolCallControllers.set(toolCallId, toolCallController);
                                }
                                break;
                            }
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].FinishMessage:
                            controller.enqueue({
                                type: "message-finish",
                                path: [],
                                ...value
                            });
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].StartStep:
                            controller.enqueue({
                                type: "step-start",
                                path: [],
                                ...value
                            });
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].FinishStep:
                            controller.enqueue({
                                type: "step-finish",
                                path: [],
                                ...value
                            });
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].Data:
                            controller.enqueue({
                                type: "data",
                                path: [],
                                data: value
                            });
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].Annotation:
                            controller.enqueue({
                                type: "annotations",
                                path: [],
                                annotations: value
                            });
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].Source:
                            {
                                const { parentId, ...sourceData } = value;
                                const ctrl = parentId ? controller.withParentId(parentId) : controller;
                                ctrl.appendSource({
                                    type: "source",
                                    ...sourceData
                                });
                                break;
                            }
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].Error:
                            controller.enqueue({
                                type: "error",
                                path: [],
                                error: value
                            });
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].File:
                            controller.appendFile({
                                type: "file",
                                ...value
                            });
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].AuiUpdateStateOperations:
                            controller.enqueue({
                                type: "update-state",
                                path: [],
                                operations: value
                            });
                            break;
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].ReasoningSignature:
                        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$chunk$2d$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamStreamChunkType"].RedactedReasoning:
                            break;
                        default:
                            {
                                const exhaustiveCheck = type;
                                throw new Error("unsupported chunk type: ".concat(exhaustiveCheck));
                            }
                    }
                },
                flush () {
                    activeToolCallArgsText === null || activeToolCallArgsText === void 0 ? void 0 : activeToolCallArgsText.close();
                    activeToolCallArgsText = void 0;
                    toolCallControllers.forEach((controller)=>controller.close());
                    toolCallControllers.clear();
                }
            });
            return readable.pipeThrough(new TextDecoderStream()).pipeThrough(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$LineDecoderStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LineDecoderStream"]()).pipeThrough(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$serialization$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamChunkDecoder"]()).pipeThrough(transform);
        });
    }
};
;
 //# sourceMappingURL=DataStream.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/utils/generateId.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/utils/generateId.tsx
__turbopack_context__.s([
    "generateId",
    ()=>generateId
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nanoid$2f$non$2d$secure$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/nanoid/non-secure/index.js [app-client] (ecmascript)");
;
var generateId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nanoid$2f$non$2d$secure$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["customAlphabet"])("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", 7);
;
 //# sourceMappingURL=generateId.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/modules/assistant-stream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/modules/assistant-stream.ts
__turbopack_context__.s([
    "createAssistantStream",
    ()=>createAssistantStream,
    "createAssistantStreamController",
    ()=>createAssistantStreamController,
    "createAssistantStreamResponse",
    ()=>createAssistantStreamResponse
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$AssistantStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/AssistantStream.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/stream/merge.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$modules$2f$text$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/modules/text.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$modules$2f$tool$2d$call$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/modules/tool-call.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$Counter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/Counter.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$path$2d$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/stream/path-utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$DataStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/serialization/data-stream/DataStream.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$generateId$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/generateId.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$promiseWithResolvers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/utils/promiseWithResolvers.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
var AssistantStreamControllerImpl = class _AssistantStreamControllerImpl {
    get __internal_isClosed() {
        return this._state.merger.isSealed();
    }
    __internal_getReadable() {
        return this._state.merger.readable;
    }
    __internal_subscribeToClose(callback) {
        this._state.closeSubscriber = callback;
    }
    _addPart(part, stream) {
        if (this._state.append) {
            this._state.append.controller.close();
            this._state.append = void 0;
        }
        this.enqueue({
            type: "part-start",
            part,
            path: []
        });
        this._state.merger.addStream(stream.pipeThrough(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$path$2d$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PathAppendEncoder"](this._state.contentCounter.value)));
    }
    merge(stream) {
        this._state.merger.addStream(stream.pipeThrough(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$path$2d$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PathMergeEncoder"](this._state.contentCounter)));
    }
    appendText(textDelta) {
        var _this__state_append;
        if (((_this__state_append = this._state.append) === null || _this__state_append === void 0 ? void 0 : _this__state_append.kind) !== "text") {
            this._state.append = {
                kind: "text",
                controller: this.addTextPart()
            };
        }
        this._state.append.controller.append(textDelta);
    }
    appendReasoning(textDelta) {
        var _this__state_append;
        if (((_this__state_append = this._state.append) === null || _this__state_append === void 0 ? void 0 : _this__state_append.kind) !== "reasoning") {
            this._state.append = {
                kind: "reasoning",
                controller: this.addReasoningPart()
            };
        }
        this._state.append.controller.append(textDelta);
    }
    addTextPart() {
        const [stream, controller] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$modules$2f$text$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTextStreamController"])();
        this._addPart({
            type: "text"
        }, stream);
        return controller;
    }
    addReasoningPart() {
        const [stream, controller] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$modules$2f$text$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTextStreamController"])();
        this._addPart({
            type: "reasoning"
        }, stream);
        return controller;
    }
    addToolCallPart(options) {
        const opt = typeof options === "string" ? {
            toolName: options
        } : options;
        const toolName = opt.toolName;
        var _opt_toolCallId;
        const toolCallId = (_opt_toolCallId = opt.toolCallId) !== null && _opt_toolCallId !== void 0 ? _opt_toolCallId : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$generateId$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["generateId"])();
        const [stream, controller] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$modules$2f$tool$2d$call$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToolCallStreamController"])();
        this._addPart({
            type: "tool-call",
            toolName,
            toolCallId,
            ...this._parentId && {
                parentId: this._parentId
            }
        }, stream);
        if (opt.argsText !== void 0) {
            controller.argsText.append(opt.argsText);
            controller.argsText.close();
        }
        if (opt.args !== void 0) {
            controller.argsText.append(JSON.stringify(opt.args));
            controller.argsText.close();
        }
        if (opt.response !== void 0) {
            controller.setResponse(opt.response);
        }
        return controller;
    }
    appendSource(options) {
        this._addPart({
            ...options,
            ...this._parentId && {
                parentId: this._parentId
            }
        }, new ReadableStream({
            start (controller) {
                controller.enqueue({
                    type: "part-finish",
                    path: []
                });
                controller.close();
            }
        }));
    }
    appendFile(options) {
        this._addPart(options, new ReadableStream({
            start (controller) {
                controller.enqueue({
                    type: "part-finish",
                    path: []
                });
                controller.close();
            }
        }));
    }
    enqueue(chunk) {
        this._state.merger.enqueue(chunk);
        if (chunk.type === "part-start" && chunk.path.length === 0) {
            this._state.contentCounter.up();
        }
    }
    withParentId(parentId) {
        const controller = new _AssistantStreamControllerImpl(this._state);
        controller._parentId = parentId;
        return controller;
    }
    close() {
        var _this__state_append_controller, _this__state_append, _this__state_closeSubscriber, _this__state;
        (_this__state_append = this._state.append) === null || _this__state_append === void 0 ? void 0 : (_this__state_append_controller = _this__state_append.controller) === null || _this__state_append_controller === void 0 ? void 0 : _this__state_append_controller.close();
        this._state.merger.seal();
        (_this__state_closeSubscriber = (_this__state = this._state).closeSubscriber) === null || _this__state_closeSubscriber === void 0 ? void 0 : _this__state_closeSubscriber.call(_this__state);
    }
    constructor(state){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "_state", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "_parentId", void 0);
        this._state = state || {
            merger: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$merge$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMergeStream"])(),
            contentCounter: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$Counter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Counter"]()
        };
    }
};
function createAssistantStream(callback) {
    const controller = new AssistantStreamControllerImpl();
    const runTask = async ()=>{
        try {
            await callback(controller);
        } catch (e) {
            if (!controller.__internal_isClosed) {
                controller.enqueue({
                    type: "error",
                    path: [],
                    error: String(e)
                });
            }
            throw e;
        } finally{
            if (!controller.__internal_isClosed) {
                controller.close();
            }
        }
    };
    runTask();
    return controller.__internal_getReadable();
}
function createAssistantStreamController() {
    const { resolve, promise } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$promiseWithResolvers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["promiseWithResolvers"])();
    let controller;
    const stream = createAssistantStream((c)=>{
        controller = c;
        controller.__internal_subscribeToClose(resolve);
        return promise;
    });
    return [
        stream,
        controller
    ];
}
function createAssistantStreamResponse(callback) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$AssistantStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AssistantStream"].toResponse(createAssistantStream(callback), new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$serialization$2f$data$2d$stream$2f$DataStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DataStreamEncoder"]());
}
;
 //# sourceMappingURL=assistant-stream.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/utils/stream/AssistantTransformStream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/utils/stream/AssistantTransformStream.ts
__turbopack_context__.s([
    "AssistantTransformStream",
    ()=>AssistantTransformStream
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$modules$2f$assistant$2d$stream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/modules/assistant-stream.js [app-client] (ecmascript)");
;
var AssistantTransformStream = class extends TransformStream {
    constructor(transformer, writableStrategy, readableStrategy){
        const [stream, runController] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$modules$2f$assistant$2d$stream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAssistantStreamController"])();
        let runPipeTask;
        super({
            start (controller) {
                var _transformer_start;
                runPipeTask = stream.pipeTo(new WritableStream({
                    write (chunk) {
                        controller.enqueue(chunk);
                    },
                    abort (reason) {
                        controller.error(reason);
                    },
                    close () {
                        controller.terminate();
                    }
                })).catch((error)=>{
                    controller.error(error);
                });
                return (_transformer_start = transformer.start) === null || _transformer_start === void 0 ? void 0 : _transformer_start.call(transformer, runController);
            },
            transform (chunk) {
                var _transformer_transform;
                return (_transformer_transform = transformer.transform) === null || _transformer_transform === void 0 ? void 0 : _transformer_transform.call(transformer, chunk, runController);
            },
            async flush () {
                var _transformer_flush;
                await ((_transformer_flush = transformer.flush) === null || _transformer_flush === void 0 ? void 0 : _transformer_flush.call(transformer, runController));
                runController.close();
                await runPipeTask;
            }
        }, writableStrategy, readableStrategy);
    }
};
;
 //# sourceMappingURL=AssistantTransformStream.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/serialization/PlainText.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/serialization/PlainText.ts
__turbopack_context__.s([
    "PlainTextDecoder",
    ()=>PlainTextDecoder,
    "PlainTextEncoder",
    ()=>PlainTextEncoder
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$AssistantTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/stream/AssistantTransformStream.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$PipeableTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/stream/PipeableTransformStream.js [app-client] (ecmascript)");
;
;
;
var PlainTextEncoder = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$PipeableTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PipeableTransformStream"] {
    constructor(){
        super((readable)=>{
            const transform = new TransformStream({
                transform (chunk, controller) {
                    const type = chunk.type;
                    switch(type){
                        case "text-delta":
                            controller.enqueue(chunk.textDelta);
                            break;
                        case "part-start":
                        case "part-finish":
                        case "step-start":
                        case "step-finish":
                        case "message-finish":
                        case "error":
                            break;
                        default:
                            const unsupportedType = type;
                            throw new Error("unsupported chunk type: ".concat(unsupportedType));
                    }
                }
            });
            return readable.pipeThrough(transform).pipeThrough(new TextEncoderStream());
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "headers", new Headers({
            "Content-Type": "text/plain; charset=utf-8",
            "x-vercel-ai-data-stream": "v1"
        }));
    }
};
var PlainTextDecoder = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$PipeableTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PipeableTransformStream"] {
    constructor(){
        super((readable)=>{
            const transform = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$AssistantTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AssistantTransformStream"]({
                transform (chunk, controller) {
                    controller.appendText(chunk);
                }
            });
            return readable.pipeThrough(new TextDecoderStream()).pipeThrough(transform);
        });
    }
};
;
 //# sourceMappingURL=PlainText.js.map
}),
"[project]/node_modules/assistant-stream/dist/utils/json/fix-json.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/utils/json/fix-json.ts
__turbopack_context__.s([
    "fixJson",
    ()=>fixJson
]);
function fixJson(input) {
    const stack = [
        "ROOT"
    ];
    let lastValidIndex = -1;
    let literalStart = null;
    const path = [];
    let currentKey;
    function pushCurrentKeyToPath() {
        if (currentKey !== void 0) {
            path.push(JSON.parse('"' + currentKey + '"'));
            currentKey = void 0;
        }
    }
    function processValueStart(char, i, swapState) {
        {
            switch(char){
                case '"':
                    {
                        lastValidIndex = i;
                        stack.pop();
                        stack.push(swapState);
                        stack.push("INSIDE_STRING");
                        pushCurrentKeyToPath();
                        break;
                    }
                case "f":
                case "t":
                case "n":
                    {
                        lastValidIndex = i;
                        literalStart = i;
                        stack.pop();
                        stack.push(swapState);
                        stack.push("INSIDE_LITERAL");
                        break;
                    }
                case "-":
                    {
                        stack.pop();
                        stack.push(swapState);
                        stack.push("INSIDE_NUMBER");
                        pushCurrentKeyToPath();
                        break;
                    }
                case "0":
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                    {
                        lastValidIndex = i;
                        stack.pop();
                        stack.push(swapState);
                        stack.push("INSIDE_NUMBER");
                        pushCurrentKeyToPath();
                        break;
                    }
                case "{":
                    {
                        lastValidIndex = i;
                        stack.pop();
                        stack.push(swapState);
                        stack.push("INSIDE_OBJECT_START");
                        pushCurrentKeyToPath();
                        break;
                    }
                case "[":
                    {
                        lastValidIndex = i;
                        stack.pop();
                        stack.push(swapState);
                        stack.push("INSIDE_ARRAY_START");
                        pushCurrentKeyToPath();
                        break;
                    }
            }
        }
    }
    function processAfterObjectValue(char, i) {
        switch(char){
            case ",":
                {
                    stack.pop();
                    stack.push("INSIDE_OBJECT_AFTER_COMMA");
                    break;
                }
            case "}":
                {
                    lastValidIndex = i;
                    stack.pop();
                    currentKey = path.pop();
                    break;
                }
        }
    }
    function processAfterArrayValue(char, i) {
        switch(char){
            case ",":
                {
                    stack.pop();
                    stack.push("INSIDE_ARRAY_AFTER_COMMA");
                    currentKey = (Number(currentKey) + 1).toString();
                    break;
                }
            case "]":
                {
                    lastValidIndex = i;
                    stack.pop();
                    currentKey = path.pop();
                    break;
                }
        }
    }
    for(let i = 0; i < input.length; i++){
        const char = input[i];
        const currentState = stack[stack.length - 1];
        switch(currentState){
            case "ROOT":
                processValueStart(char, i, "FINISH");
                break;
            case "INSIDE_OBJECT_START":
                {
                    switch(char){
                        case '"':
                            {
                                stack.pop();
                                stack.push("INSIDE_OBJECT_KEY");
                                currentKey = "";
                                break;
                            }
                        case "}":
                            {
                                lastValidIndex = i;
                                stack.pop();
                                currentKey = path.pop();
                                break;
                            }
                    }
                    break;
                }
            case "INSIDE_OBJECT_AFTER_COMMA":
                {
                    switch(char){
                        case '"':
                            {
                                stack.pop();
                                stack.push("INSIDE_OBJECT_KEY");
                                currentKey = "";
                                break;
                            }
                    }
                    break;
                }
            case "INSIDE_OBJECT_KEY":
                {
                    switch(char){
                        case '"':
                            {
                                stack.pop();
                                stack.push("INSIDE_OBJECT_AFTER_KEY");
                                break;
                            }
                        case "\\":
                            {
                                stack.push("INSIDE_STRING_ESCAPE");
                                currentKey += char;
                                break;
                            }
                        default:
                            {
                                currentKey += char;
                                break;
                            }
                    }
                    break;
                }
            case "INSIDE_OBJECT_AFTER_KEY":
                {
                    switch(char){
                        case ":":
                            {
                                stack.pop();
                                stack.push("INSIDE_OBJECT_BEFORE_VALUE");
                                break;
                            }
                    }
                    break;
                }
            case "INSIDE_OBJECT_BEFORE_VALUE":
                {
                    processValueStart(char, i, "INSIDE_OBJECT_AFTER_VALUE");
                    break;
                }
            case "INSIDE_OBJECT_AFTER_VALUE":
                {
                    processAfterObjectValue(char, i);
                    break;
                }
            case "INSIDE_STRING":
                {
                    switch(char){
                        case '"':
                            {
                                stack.pop();
                                lastValidIndex = i;
                                currentKey = path.pop();
                                break;
                            }
                        case "\\":
                            {
                                stack.push("INSIDE_STRING_ESCAPE");
                                break;
                            }
                        default:
                            {
                                lastValidIndex = i;
                            }
                    }
                    break;
                }
            case "INSIDE_ARRAY_START":
                {
                    switch(char){
                        case "]":
                            {
                                lastValidIndex = i;
                                stack.pop();
                                currentKey = path.pop();
                                break;
                            }
                        default:
                            {
                                lastValidIndex = i;
                                currentKey = "0";
                                processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
                                break;
                            }
                    }
                    break;
                }
            case "INSIDE_ARRAY_AFTER_VALUE":
                {
                    switch(char){
                        case ",":
                            {
                                stack.pop();
                                stack.push("INSIDE_ARRAY_AFTER_COMMA");
                                currentKey = (Number(currentKey) + 1).toString();
                                break;
                            }
                        case "]":
                            {
                                lastValidIndex = i;
                                stack.pop();
                                currentKey = path.pop();
                                break;
                            }
                        default:
                            {
                                lastValidIndex = i;
                                break;
                            }
                    }
                    break;
                }
            case "INSIDE_ARRAY_AFTER_COMMA":
                {
                    processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
                    break;
                }
            case "INSIDE_STRING_ESCAPE":
                {
                    stack.pop();
                    if (stack[stack.length - 1] === "INSIDE_STRING") {
                        lastValidIndex = i;
                    } else if (stack[stack.length - 1] === "INSIDE_OBJECT_KEY") {
                        currentKey += char;
                    }
                    break;
                }
            case "INSIDE_NUMBER":
                {
                    switch(char){
                        case "0":
                        case "1":
                        case "2":
                        case "3":
                        case "4":
                        case "5":
                        case "6":
                        case "7":
                        case "8":
                        case "9":
                            {
                                lastValidIndex = i;
                                break;
                            }
                        case "e":
                        case "E":
                        case "-":
                        case ".":
                            {
                                break;
                            }
                        case ",":
                            {
                                stack.pop();
                                currentKey = path.pop();
                                if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
                                    processAfterArrayValue(char, i);
                                }
                                if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
                                    processAfterObjectValue(char, i);
                                }
                                break;
                            }
                        case "}":
                            {
                                stack.pop();
                                currentKey = path.pop();
                                if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
                                    processAfterObjectValue(char, i);
                                }
                                break;
                            }
                        case "]":
                            {
                                stack.pop();
                                currentKey = path.pop();
                                if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
                                    processAfterArrayValue(char, i);
                                }
                                break;
                            }
                        default:
                            {
                                stack.pop();
                                currentKey = path.pop();
                                break;
                            }
                    }
                    break;
                }
            case "INSIDE_LITERAL":
                {
                    const partialLiteral = input.substring(literalStart, i + 1);
                    if (!"false".startsWith(partialLiteral) && !"true".startsWith(partialLiteral) && !"null".startsWith(partialLiteral)) {
                        stack.pop();
                        if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
                            processAfterObjectValue(char, i);
                        } else if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
                            processAfterArrayValue(char, i);
                        }
                    } else {
                        lastValidIndex = i;
                    }
                    break;
                }
        }
    }
    let result = input.slice(0, lastValidIndex + 1);
    for(let i = stack.length - 1; i >= 0; i--){
        const state = stack[i];
        switch(state){
            case "INSIDE_STRING":
                {
                    result += '"';
                    break;
                }
            case "INSIDE_OBJECT_KEY":
            case "INSIDE_OBJECT_AFTER_KEY":
            case "INSIDE_OBJECT_AFTER_COMMA":
            case "INSIDE_OBJECT_START":
            case "INSIDE_OBJECT_BEFORE_VALUE":
            case "INSIDE_OBJECT_AFTER_VALUE":
                {
                    result += "}";
                    break;
                }
            case "INSIDE_ARRAY_START":
            case "INSIDE_ARRAY_AFTER_COMMA":
            case "INSIDE_ARRAY_AFTER_VALUE":
                {
                    result += "]";
                    break;
                }
            case "INSIDE_LITERAL":
                {
                    const partialLiteral = input.substring(literalStart, input.length);
                    if ("true".startsWith(partialLiteral)) {
                        result += "true".slice(partialLiteral.length);
                    } else if ("false".startsWith(partialLiteral)) {
                        result += "false".slice(partialLiteral.length);
                    } else if ("null".startsWith(partialLiteral)) {
                        result += "null".slice(partialLiteral.length);
                    }
                }
        }
    }
    return [
        result,
        path
    ];
}
;
 //# sourceMappingURL=fix-json.js.map
}),
"[project]/node_modules/assistant-stream/dist/utils/json/parse-partial-json-object.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/utils/json/parse-partial-json-object.ts
__turbopack_context__.s([
    "getPartialJsonObjectFieldState",
    ()=>getPartialJsonObjectFieldState,
    "getPartialJsonObjectMeta",
    ()=>getPartialJsonObjectMeta,
    "parsePartialJsonObject",
    ()=>parsePartialJsonObject
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$secure$2d$json$2d$parse$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/secure-json-parse/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$fix$2d$json$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/utils/json/fix-json.js [app-client] (ecmascript)");
;
;
var PARTIAL_JSON_OBJECT_META_SYMBOL = Symbol("aui.parse-partial-json-object.meta");
var getPartialJsonObjectMeta = (obj)=>{
    return obj === null || obj === void 0 ? void 0 : obj[PARTIAL_JSON_OBJECT_META_SYMBOL];
};
var parsePartialJsonObject = (json)=>{
    if (json.length === 0) return {
        [PARTIAL_JSON_OBJECT_META_SYMBOL]: {
            state: "partial",
            partialPath: []
        }
    };
    try {
        const res = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$secure$2d$json$2d$parse$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].parse(json);
        if (typeof res !== "object" || res === null) throw new Error("argsText is expected to be an object");
        res[PARTIAL_JSON_OBJECT_META_SYMBOL] = {
            state: "complete",
            partialPath: []
        };
        return res;
    } catch (e) {
        try {
            const [fixedJson, partialPath] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$fix$2d$json$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fixJson"])(json);
            const res = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$secure$2d$json$2d$parse$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].parse(fixedJson);
            if (typeof res !== "object" || res === null) throw new Error("argsText is expected to be an object");
            res[PARTIAL_JSON_OBJECT_META_SYMBOL] = {
                state: "partial",
                partialPath
            };
            return res;
        } catch (e) {
            return void 0;
        }
    }
};
var getFieldState = (parent, parentMeta, fieldPath)=>{
    if (typeof parent !== "object" || parent === null) return parentMeta.state;
    if (parentMeta.state === "complete") return "complete";
    if (fieldPath.length === 0) return parentMeta.state;
    const [field, ...restPath] = fieldPath;
    if (!Object.prototype.hasOwnProperty.call(parent, field)) return "partial";
    const [partialField, ...restPartialPath] = parentMeta.partialPath;
    if (field !== partialField) return "complete";
    const child = parent[field];
    const childMeta = {
        state: "partial",
        partialPath: restPartialPath
    };
    return getFieldState(child, childMeta, restPath);
};
var getPartialJsonObjectFieldState = (obj, fieldPath)=>{
    const meta = getPartialJsonObjectMeta(obj);
    if (!meta) throw new Error("unable to determine object state");
    return getFieldState(obj, meta, fieldPath.map(String));
};
;
 //# sourceMappingURL=parse-partial-json-object.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/object/ObjectStreamAccumulator.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/object/ObjectStreamAccumulator.ts
__turbopack_context__.s([
    "ObjectStreamAccumulator",
    ()=>ObjectStreamAccumulator
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
;
var ObjectStreamAccumulator = class _ObjectStreamAccumulator {
    get state() {
        return this._state;
    }
    append(ops) {
        this._state = ops.reduce((state, op)=>_ObjectStreamAccumulator.apply(state, op), this._state);
    }
    static apply(state, op) {
        const type = op.type;
        switch(type){
            case "set":
                return _ObjectStreamAccumulator.updatePath(state, op.path, ()=>op.value);
            case "append-text":
                return _ObjectStreamAccumulator.updatePath(state, op.path, (current)=>{
                    if (typeof current !== "string") throw new Error("Expected string at path [".concat(op.path.join(", "), "]"));
                    return current + op.value;
                });
            default:
                {
                    const _exhaustiveCheck = type;
                    throw new Error("Invalid operation type: ".concat(_exhaustiveCheck));
                }
        }
    }
    static updatePath(state, path, updater) {
        if (path.length === 0) return updater(state);
        state !== null && state !== void 0 ? state : state = {};
        if (typeof state !== "object") {
            throw new Error("Invalid path: [".concat(path.join(", "), "]"));
        }
        const [key, ...rest] = path;
        if (Array.isArray(state)) {
            const idx = Number(key);
            if (isNaN(idx)) throw new Error("Expected array index at [".concat(path.join(", "), "]"));
            if (idx > state.length || idx < 0) throw new Error("Insert array index out of bounds");
            const nextState2 = [
                ...state
            ];
            nextState2[idx] = this.updatePath(nextState2[idx], rest, updater);
            return nextState2;
        }
        const nextState = {
            ...state
        };
        nextState[key] = this.updatePath(nextState[key], rest, updater);
        return nextState;
    }
    constructor(initialValue = null){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "_state", void 0);
        this._state = initialValue;
    }
};
;
 //# sourceMappingURL=ObjectStreamAccumulator.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/accumulators/assistant-message-accumulator.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/accumulators/assistant-message-accumulator.ts
__turbopack_context__.s([
    "AssistantMessageAccumulator",
    ()=>AssistantMessageAccumulator,
    "createInitialMessage",
    ()=>createInitialMessage
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$generateId$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/generateId.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/utils/json/parse-partial-json-object.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$object$2f$ObjectStreamAccumulator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/object/ObjectStreamAccumulator.js [app-client] (ecmascript)");
;
;
;
var createInitialMessage = function() {
    let { unstable_state = null } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return {
        role: "assistant",
        status: {
            type: "running"
        },
        parts: [],
        get content () {
            return this.parts;
        },
        metadata: {
            unstable_state,
            unstable_data: [],
            unstable_annotations: [],
            steps: [],
            custom: {}
        }
    };
};
var updatePartForPath = (message, chunk, updater)=>{
    if (message.parts.length === 0) {
        throw new Error("No parts available to update.");
    }
    if (chunk.path.length !== 1) throw new Error("Nested paths are not supported yet.");
    const partIndex = chunk.path[0];
    const updatedPart = updater(message.parts[partIndex]);
    return {
        ...message,
        parts: [
            ...message.parts.slice(0, partIndex),
            updatedPart,
            ...message.parts.slice(partIndex + 1)
        ],
        get content () {
            return this.parts;
        }
    };
};
var handlePartStart = (message, chunk)=>{
    const partInit = chunk.part;
    if (partInit.type === "text" || partInit.type === "reasoning") {
        const newTextPart = {
            type: partInit.type,
            text: "",
            status: {
                type: "running"
            },
            ...partInit.parentId && {
                parentId: partInit.parentId
            }
        };
        return {
            ...message,
            parts: [
                ...message.parts,
                newTextPart
            ],
            get content () {
                return this.parts;
            }
        };
    } else if (partInit.type === "tool-call") {
        const newToolCallPart = {
            type: "tool-call",
            state: "partial-call",
            status: {
                type: "running",
                isArgsComplete: false
            },
            toolCallId: partInit.toolCallId,
            toolName: partInit.toolName,
            argsText: "",
            args: {},
            ...partInit.parentId && {
                parentId: partInit.parentId
            }
        };
        return {
            ...message,
            parts: [
                ...message.parts,
                newToolCallPart
            ],
            get content () {
                return this.parts;
            }
        };
    } else if (partInit.type === "source") {
        const newSourcePart = {
            type: "source",
            sourceType: partInit.sourceType,
            id: partInit.id,
            url: partInit.url,
            ...partInit.title ? {
                title: partInit.title
            } : void 0,
            ...partInit.parentId && {
                parentId: partInit.parentId
            }
        };
        return {
            ...message,
            parts: [
                ...message.parts,
                newSourcePart
            ],
            get content () {
                return this.parts;
            }
        };
    } else if (partInit.type === "file") {
        const newFilePart = {
            type: "file",
            mimeType: partInit.mimeType,
            data: partInit.data
        };
        return {
            ...message,
            parts: [
                ...message.parts,
                newFilePart
            ],
            get content () {
                return this.parts;
            }
        };
    } else {
        throw new Error("Unsupported part type: ".concat(partInit.type));
    }
};
var handleToolCallArgsTextFinish = (message, chunk)=>{
    return updatePartForPath(message, chunk, (part)=>{
        if (part.type !== "tool-call") {
            throw new Error("Last is not a tool call");
        }
        if (part.state !== "partial-call") return part;
        return {
            ...part,
            state: "call"
        };
    });
};
var handlePartFinish = (message, chunk)=>{
    return updatePartForPath(message, chunk, (part)=>({
            ...part,
            status: {
                type: "complete",
                reason: "unknown"
            }
        }));
};
var handleTextDelta = (message, chunk)=>{
    return updatePartForPath(message, chunk, (part)=>{
        if (part.type === "text" || part.type === "reasoning") {
            return {
                ...part,
                text: part.text + chunk.textDelta
            };
        } else if (part.type === "tool-call") {
            const newArgsText = part.argsText + chunk.textDelta;
            var _parsePartialJsonObject;
            const newArgs = (_parsePartialJsonObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parsePartialJsonObject"])(newArgsText)) !== null && _parsePartialJsonObject !== void 0 ? _parsePartialJsonObject : part.args;
            return {
                ...part,
                argsText: newArgsText,
                args: newArgs
            };
        } else {
            throw new Error("text-delta received but part is neither text nor tool-call");
        }
    });
};
var handleResult = (message, chunk)=>{
    return updatePartForPath(message, chunk, (part)=>{
        if (part.type === "tool-call") {
            var _chunk_isError;
            return {
                ...part,
                state: "result",
                ...chunk.artifact !== void 0 ? {
                    artifact: chunk.artifact
                } : {},
                result: chunk.result,
                isError: (_chunk_isError = chunk.isError) !== null && _chunk_isError !== void 0 ? _chunk_isError : false,
                status: {
                    type: "complete",
                    reason: "stop"
                }
            };
        } else {
            throw new Error("Result chunk received but part is not a tool-call");
        }
    });
};
var handleMessageFinish = (message, chunk)=>{
    var _message_status, _message_status1;
    if (((_message_status = message.status) === null || _message_status === void 0 ? void 0 : _message_status.type) === "incomplete" && ((_message_status1 = message.status) === null || _message_status1 === void 0 ? void 0 : _message_status1.reason) === "error") {
        return message;
    }
    const newStatus = getStatus(chunk);
    return {
        ...message,
        status: newStatus
    };
};
var getStatus = (chunk)=>{
    if (chunk.finishReason === "tool-calls") {
        return {
            type: "requires-action",
            reason: "tool-calls"
        };
    } else if (chunk.finishReason === "stop" || chunk.finishReason === "unknown") {
        return {
            type: "complete",
            reason: chunk.finishReason
        };
    } else {
        return {
            type: "incomplete",
            reason: chunk.finishReason
        };
    }
};
var handleAnnotations = (message, chunk)=>{
    return {
        ...message,
        metadata: {
            ...message.metadata,
            unstable_annotations: [
                ...message.metadata.unstable_annotations,
                ...chunk.annotations
            ]
        }
    };
};
var handleData = (message, chunk)=>{
    return {
        ...message,
        metadata: {
            ...message.metadata,
            unstable_data: [
                ...message.metadata.unstable_data,
                ...chunk.data
            ]
        }
    };
};
var handleStepStart = (message, chunk)=>{
    return {
        ...message,
        metadata: {
            ...message.metadata,
            steps: [
                ...message.metadata.steps,
                {
                    state: "started",
                    messageId: chunk.messageId
                }
            ]
        }
    };
};
var handleStepFinish = (message, chunk)=>{
    var _steps_lastIndex;
    const steps = message.metadata.steps.slice();
    const lastIndex = steps.length - 1;
    if (steps.length > 0 && ((_steps_lastIndex = steps[lastIndex]) === null || _steps_lastIndex === void 0 ? void 0 : _steps_lastIndex.state) === "started") {
        steps[lastIndex] = {
            ...steps[lastIndex],
            state: "finished",
            finishReason: chunk.finishReason,
            usage: chunk.usage,
            isContinued: chunk.isContinued
        };
    } else {
        steps.push({
            state: "finished",
            messageId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$generateId$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["generateId"])(),
            finishReason: chunk.finishReason,
            usage: chunk.usage,
            isContinued: chunk.isContinued
        });
    }
    return {
        ...message,
        metadata: {
            ...message.metadata,
            steps
        }
    };
};
var handleErrorChunk = (message, chunk)=>{
    return {
        ...message,
        status: {
            type: "incomplete",
            reason: "error",
            error: chunk.error
        }
    };
};
var handleUpdateState = (message, chunk)=>{
    const acc = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$object$2f$ObjectStreamAccumulator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectStreamAccumulator"](message.metadata.unstable_state);
    acc.append(chunk.operations);
    return {
        ...message,
        metadata: {
            ...message.metadata,
            unstable_state: acc.state
        }
    };
};
var throttleCallback = (callback)=>{
    let hasScheduled = false;
    return ()=>{
        if (hasScheduled) return;
        hasScheduled = true;
        queueMicrotask(()=>{
            hasScheduled = false;
            callback();
        });
    };
};
var AssistantMessageAccumulator = class extends TransformStream {
    constructor({ initialMessage, throttle, onError } = {}){
        let message = initialMessage !== null && initialMessage !== void 0 ? initialMessage : createInitialMessage();
        let controller;
        const emitChunk = throttle ? throttleCallback(()=>{
            controller === null || controller === void 0 ? void 0 : controller.enqueue(message);
        }) : ()=>{
            controller === null || controller === void 0 ? void 0 : controller.enqueue(message);
        };
        super({
            start (c) {
                controller = c;
            },
            transform (chunk) {
                const type = chunk.type;
                switch(type){
                    case "part-start":
                        message = handlePartStart(message, chunk);
                        break;
                    case "tool-call-args-text-finish":
                        message = handleToolCallArgsTextFinish(message, chunk);
                        break;
                    case "part-finish":
                        message = handlePartFinish(message, chunk);
                        break;
                    case "text-delta":
                        message = handleTextDelta(message, chunk);
                        break;
                    case "result":
                        message = handleResult(message, chunk);
                        break;
                    case "message-finish":
                        message = handleMessageFinish(message, chunk);
                        break;
                    case "annotations":
                        message = handleAnnotations(message, chunk);
                        break;
                    case "data":
                        message = handleData(message, chunk);
                        break;
                    case "step-start":
                        message = handleStepStart(message, chunk);
                        break;
                    case "step-finish":
                        message = handleStepFinish(message, chunk);
                        break;
                    case "error":
                        message = handleErrorChunk(message, chunk);
                        onError === null || onError === void 0 ? void 0 : onError(chunk.error);
                        break;
                    case "update-state":
                        message = handleUpdateState(message, chunk);
                        break;
                    default:
                        {
                            const unhandledType = type;
                            throw new Error("Unsupported chunk type: ".concat(unhandledType));
                        }
                }
                emitChunk();
            },
            flush (controller2) {
                var _message_status;
                if (((_message_status = message.status) === null || _message_status === void 0 ? void 0 : _message_status.type) === "running") {
                    var _message_parts;
                    var _message_parts_some;
                    const requiresAction = (_message_parts_some = (_message_parts = message.parts) === null || _message_parts === void 0 ? void 0 : _message_parts.some((part)=>part.type === "tool-call" && (part.state === "call" || part.state === "partial-call") && part.result === void 0)) !== null && _message_parts_some !== void 0 ? _message_parts_some : false;
                    message = handleMessageFinish(message, {
                        type: "message-finish",
                        path: [],
                        finishReason: requiresAction ? "tool-calls" : "unknown",
                        usage: {
                            promptTokens: 0,
                            completionTokens: 0
                        }
                    });
                    controller2.enqueue(message);
                }
            }
        });
    }
};
;
 //# sourceMappingURL=assistant-message-accumulator.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/accumulators/AssistantMessageStream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/accumulators/AssistantMessageStream.ts
__turbopack_context__.s([
    "AssistantMessageStream",
    ()=>AssistantMessageStream
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$accumulators$2f$assistant$2d$message$2d$accumulator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/accumulators/assistant-message-accumulator.js [app-client] (ecmascript)");
;
var AssistantMessageStream = class _AssistantMessageStream {
    static fromAssistantStream(stream) {
        return new _AssistantMessageStream(stream.pipeThrough(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$accumulators$2f$assistant$2d$message$2d$accumulator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AssistantMessageAccumulator"]()));
    }
    async unstable_result() {
        let last;
        for await (const chunk of this){
            last = chunk;
        }
        if (!last) {
            return {
                role: "assistant",
                status: {
                    type: "complete",
                    reason: "unknown"
                },
                parts: [],
                content: [],
                metadata: {
                    unstable_state: null,
                    unstable_data: [],
                    unstable_annotations: [],
                    steps: [],
                    custom: {}
                }
            };
        }
        return last;
    }
    [Symbol.asyncIterator]() {
        const reader = this.readable.getReader();
        return {
            async next () {
                const { done, value } = await reader.read();
                return done ? {
                    done: true,
                    value: void 0
                } : {
                    done: false,
                    value
                };
            }
        };
    }
    tee() {
        const [readable1, readable2] = this.readable.tee();
        return [
            new _AssistantMessageStream(readable1),
            new _AssistantMessageStream(readable2)
        ];
    }
    constructor(readable){
        this.readable = readable;
        this.readable = readable;
    }
};
;
 //# sourceMappingURL=AssistantMessageStream.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/tool/ToolResponse.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/tool/ToolResponse.ts
__turbopack_context__.s([
    "ToolResponse",
    ()=>ToolResponse
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
;
let _TOOL_RESPONSE_SYMBOL;
var TOOL_RESPONSE_SYMBOL = Symbol.for("aui.tool-response");
var ToolResponse = (_TOOL_RESPONSE_SYMBOL = TOOL_RESPONSE_SYMBOL, class _ToolResponse {
    get [_TOOL_RESPONSE_SYMBOL]() {
        return true;
    }
    static [Symbol.hasInstance](obj) {
        return typeof obj === "object" && obj !== null && TOOL_RESPONSE_SYMBOL in obj;
    }
    static toResponse(result) {
        if (result instanceof _ToolResponse) {
            return result;
        }
        return new _ToolResponse({
            result: result === void 0 ? "<no result>" : result
        });
    }
    constructor(options){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "artifact", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "result", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "isError", void 0);
        if (options.artifact !== void 0) {
            this.artifact = options.artifact;
        }
        this.result = options.result;
        var _options_isError;
        this.isError = (_options_isError = options.isError) !== null && _options_isError !== void 0 ? _options_isError : false;
    }
});
;
 //# sourceMappingURL=ToolResponse.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/utils/withPromiseOrValue.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/utils/withPromiseOrValue.ts
__turbopack_context__.s([
    "withPromiseOrValue",
    ()=>withPromiseOrValue
]);
function withPromiseOrValue(callback, thenHandler, catchHandler) {
    try {
        const promiseOrValue = callback();
        if (typeof promiseOrValue === "object" && promiseOrValue !== null && "then" in promiseOrValue) {
            return promiseOrValue.then(thenHandler, catchHandler);
        } else {
            thenHandler(promiseOrValue);
        }
    } catch (e) {
        catchHandler(e);
    }
}
;
 //# sourceMappingURL=withPromiseOrValue.js.map
}),
"[project]/node_modules/assistant-stream/dist/utils/AsyncIterableStream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/utils/AsyncIterableStream.ts
__turbopack_context__.s([
    "asAsyncIterableStream",
    ()=>asAsyncIterableStream
]);
async function* streamGeneratorPolyfill() {
    const reader = this.getReader();
    try {
        while(true){
            const { done, value } = await reader.read();
            if (done) break;
            yield value;
        }
    } finally{
        reader.releaseLock();
    }
}
function asAsyncIterableStream(source) {
    var _source, _Symbol_asyncIterator;
    var _;
    (_ = (_source = source)[_Symbol_asyncIterator = Symbol.asyncIterator]) !== null && _ !== void 0 ? _ : _source[_Symbol_asyncIterator] = streamGeneratorPolyfill;
    return source;
}
;
 //# sourceMappingURL=AsyncIterableStream.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/tool/ToolCallReader.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/tool/ToolCallReader.ts
__turbopack_context__.s([
    "ToolCallArgsReaderImpl",
    ()=>ToolCallArgsReaderImpl,
    "ToolCallReaderImpl",
    ()=>ToolCallReaderImpl,
    "ToolCallResponseReaderImpl",
    ()=>ToolCallResponseReaderImpl
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$promiseWithResolvers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/utils/promiseWithResolvers.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/utils/json/parse-partial-json-object.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$AsyncIterableStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/utils/AsyncIterableStream.js [app-client] (ecmascript)");
;
;
;
;
function getField(obj, fieldPath) {
    let current = obj;
    for (const key of fieldPath){
        if (current === void 0 || current === null) {
            return void 0;
        }
        current = current[key];
    }
    return current;
}
var GetHandle = class {
    update(args) {
        if (this.disposed) return;
        try {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPartialJsonObjectFieldState"])(args, this.fieldPath) === "complete") {
                const value = getField(args, this.fieldPath);
                if (value !== void 0) {
                    this.resolve(value);
                    this.dispose();
                }
            }
        } catch (e) {
            this.reject(e);
            this.dispose();
        }
    }
    dispose() {
        this.disposed = true;
    }
    constructor(resolve, reject, fieldPath){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "resolve", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "reject", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "disposed", false);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "fieldPath", void 0);
        this.resolve = resolve;
        this.reject = reject;
        this.fieldPath = fieldPath;
    }
};
var StreamValuesHandle = class {
    update(args) {
        if (this.disposed) return;
        try {
            const value = getField(args, this.fieldPath);
            if (value !== void 0) {
                this.controller.enqueue(value);
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPartialJsonObjectFieldState"])(args, this.fieldPath) === "complete") {
                this.controller.close();
                this.dispose();
            }
        } catch (e) {
            this.controller.error(e);
            this.dispose();
        }
    }
    dispose() {
        this.disposed = true;
    }
    constructor(controller, fieldPath){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "controller", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "disposed", false);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "fieldPath", void 0);
        this.controller = controller;
        this.fieldPath = fieldPath;
    }
};
var StreamTextHandle = class {
    update(args) {
        if (this.disposed) return;
        try {
            const value = getField(args, this.fieldPath);
            if (value !== void 0 && typeof value === "string") {
                var _this_lastValue;
                const delta = value.substring(((_this_lastValue = this.lastValue) === null || _this_lastValue === void 0 ? void 0 : _this_lastValue.length) || 0);
                this.lastValue = value;
                this.controller.enqueue(delta);
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPartialJsonObjectFieldState"])(args, this.fieldPath) === "complete") {
                this.controller.close();
                this.dispose();
            }
        } catch (e) {
            this.controller.error(e);
            this.dispose();
        }
    }
    dispose() {
        this.disposed = true;
    }
    constructor(controller, fieldPath){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "controller", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "disposed", false);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "fieldPath", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "lastValue", void 0);
        this.controller = controller;
        this.fieldPath = fieldPath;
    }
};
var ForEachHandle = class {
    update(args) {
        if (this.disposed) return;
        try {
            const array = getField(args, this.fieldPath);
            if (!Array.isArray(array)) {
                return;
            }
            for(let i = 0; i < array.length; i++){
                if (!this.processedIndexes.has(i)) {
                    const elementPath = [
                        ...this.fieldPath,
                        i
                    ];
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPartialJsonObjectFieldState"])(args, elementPath) === "complete") {
                        this.controller.enqueue(array[i]);
                        this.processedIndexes.add(i);
                    }
                }
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPartialJsonObjectFieldState"])(args, this.fieldPath) === "complete") {
                this.controller.close();
                this.dispose();
            }
        } catch (e) {
            this.controller.error(e);
            this.dispose();
        }
    }
    dispose() {
        this.disposed = true;
    }
    constructor(controller, fieldPath){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "controller", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "disposed", false);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "fieldPath", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "processedIndexes", /* @__PURE__ */ new Set());
        this.controller = controller;
        this.fieldPath = fieldPath;
    }
};
var ToolCallArgsReaderImpl = class {
    async processStream() {
        try {
            let accumulatedText = "";
            const reader = this.argTextDeltas.getReader();
            while(true){
                const { value, done } = await reader.read();
                if (done) break;
                accumulatedText += value;
                const parsedArgs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parsePartialJsonObject"])(accumulatedText);
                if (parsedArgs !== void 0) {
                    this.args = parsedArgs;
                    for (const handle of this.handles){
                        handle.update(parsedArgs);
                    }
                }
            }
        } catch (error) {
            console.error("Error processing argument stream:", error);
            for (const handle of this.handles){
                handle.dispose();
            }
        }
    }
    get() {
        for(var _len = arguments.length, fieldPath = new Array(_len), _key = 0; _key < _len; _key++){
            fieldPath[_key] = arguments[_key];
        }
        return new Promise((resolve, reject)=>{
            const handle = new GetHandle(resolve, reject, fieldPath);
            if (this.args && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getPartialJsonObjectFieldState"])(this.args, fieldPath) === "complete") {
                const value = getField(this.args, fieldPath);
                if (value !== void 0) {
                    resolve(value);
                    return;
                }
            }
            this.handles.add(handle);
            handle.update(this.args);
        });
    }
    streamValues() {
        for(var _len = arguments.length, fieldPath = new Array(_len), _key = 0; _key < _len; _key++){
            fieldPath[_key] = arguments[_key];
        }
        const simplePath = fieldPath;
        const stream = new ReadableStream({
            start: (controller)=>{
                const handle = new StreamValuesHandle(controller, simplePath);
                this.handles.add(handle);
                handle.update(this.args);
            },
            cancel: ()=>{
                for (const handle of this.handles){
                    if (handle instanceof StreamValuesHandle) {
                        handle.dispose();
                        this.handles.delete(handle);
                        break;
                    }
                }
            }
        });
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$AsyncIterableStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["asAsyncIterableStream"])(stream);
    }
    streamText() {
        for(var _len = arguments.length, fieldPath = new Array(_len), _key = 0; _key < _len; _key++){
            fieldPath[_key] = arguments[_key];
        }
        const simplePath = fieldPath;
        const stream = new ReadableStream({
            start: (controller)=>{
                const handle = new StreamTextHandle(controller, simplePath);
                this.handles.add(handle);
                handle.update(this.args);
            },
            cancel: ()=>{
                for (const handle of this.handles){
                    if (handle instanceof StreamTextHandle) {
                        handle.dispose();
                        this.handles.delete(handle);
                        break;
                    }
                }
            }
        });
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$AsyncIterableStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["asAsyncIterableStream"])(stream);
    }
    forEach() {
        for(var _len = arguments.length, fieldPath = new Array(_len), _key = 0; _key < _len; _key++){
            fieldPath[_key] = arguments[_key];
        }
        const simplePath = fieldPath;
        const stream = new ReadableStream({
            start: (controller)=>{
                const handle = new ForEachHandle(controller, simplePath);
                this.handles.add(handle);
                handle.update(this.args);
            },
            cancel: ()=>{
                for (const handle of this.handles){
                    if (handle instanceof ForEachHandle) {
                        handle.dispose();
                        this.handles.delete(handle);
                        break;
                    }
                }
            }
        });
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$AsyncIterableStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["asAsyncIterableStream"])(stream);
    }
    constructor(argTextDeltas){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "argTextDeltas", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "handles", /* @__PURE__ */ new Set());
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "args", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$json$2f$parse$2d$partial$2d$json$2d$object$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parsePartialJsonObject"])(""));
        this.argTextDeltas = argTextDeltas;
        this.processStream();
    }
};
var ToolCallResponseReaderImpl = class {
    get() {
        return this.promise;
    }
    constructor(promise){
        this.promise = promise;
    }
};
var ToolCallReaderImpl = class {
    async appendArgsTextDelta(text) {
        const writer = this.writable.getWriter();
        try {
            await writer.write(text);
        } catch (err) {
            console.warn(err);
        } finally{
            writer.releaseLock();
        }
        this.argsText += text;
    }
    setResponse(value) {
        this.resolve(value);
    }
    constructor(){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "args", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "response", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "writable", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "resolve", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "argsText", "");
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "result", {
            get: async ()=>{
                const response = await this.response.get();
                return response.result;
            }
        });
        const stream = new TransformStream();
        this.writable = stream.writable;
        this.args = new ToolCallArgsReaderImpl(stream.readable);
        const { promise, resolve } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$utils$2f$promiseWithResolvers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["promiseWithResolvers"])();
        this.resolve = resolve;
        this.response = new ToolCallResponseReaderImpl(promise);
    }
};
;
 //# sourceMappingURL=ToolCallReader.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/tool/ToolExecutionStream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/tool/ToolExecutionStream.ts
__turbopack_context__.s([
    "ToolExecutionStream",
    ()=>ToolExecutionStream
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$secure$2d$json$2d$parse$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/secure-json-parse/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$AssistantMetaTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/stream/AssistantMetaTransformStream.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$PipeableTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/stream/PipeableTransformStream.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$ToolResponse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/tool/ToolResponse.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$withPromiseOrValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/utils/withPromiseOrValue.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$ToolCallReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/tool/ToolCallReader.js [app-client] (ecmascript)");
;
;
;
;
;
;
var ToolExecutionStream = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$PipeableTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PipeableTransformStream"] {
    constructor(options){
        const toolCallPromises = /* @__PURE__ */ new Map();
        const toolCallControllers = /* @__PURE__ */ new Map();
        super((readable)=>{
            const transform = new TransformStream({
                transform (chunk, controller) {
                    if (chunk.type !== "part-finish" || chunk.meta.type !== "tool-call") {
                        controller.enqueue(chunk);
                    }
                    const type = chunk.type;
                    switch(type){
                        case "part-start":
                            if (chunk.part.type === "tool-call") {
                                const reader = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$ToolCallReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToolCallReaderImpl"]();
                                toolCallControllers.set(chunk.part.toolCallId, reader);
                                options.streamCall({
                                    reader,
                                    toolCallId: chunk.part.toolCallId,
                                    toolName: chunk.part.toolName
                                });
                            }
                            break;
                        case "text-delta":
                            {
                                if (chunk.meta.type === "tool-call") {
                                    const toolCallId = chunk.meta.toolCallId;
                                    const controller2 = toolCallControllers.get(toolCallId);
                                    if (!controller2) throw new Error("No controller found for tool call");
                                    controller2.appendArgsTextDelta(chunk.textDelta);
                                }
                                break;
                            }
                        case "result":
                            {
                                if (chunk.meta.type !== "tool-call") break;
                                const { toolCallId } = chunk.meta;
                                const controller2 = toolCallControllers.get(toolCallId);
                                if (!controller2) throw new Error("No controller found for tool call");
                                controller2.setResponse(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$ToolResponse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToolResponse"]({
                                    result: chunk.result,
                                    artifact: chunk.artifact,
                                    isError: chunk.isError
                                }));
                                break;
                            }
                        case "tool-call-args-text-finish":
                            {
                                if (chunk.meta.type !== "tool-call") break;
                                const { toolCallId, toolName } = chunk.meta;
                                const streamController = toolCallControllers.get(toolCallId);
                                if (!streamController) throw new Error("No controller found for tool call");
                                const promise = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$withPromiseOrValue$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["withPromiseOrValue"])(()=>{
                                    let args;
                                    try {
                                        args = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$secure$2d$json$2d$parse$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].parse(streamController.argsText);
                                    } catch (e) {
                                        throw new Error("Function parameter parsing failed. ".concat(JSON.stringify(e.message)));
                                    }
                                    return options.execute({
                                        toolCallId,
                                        toolName,
                                        args
                                    });
                                }, (c)=>{
                                    if (c === void 0) return;
                                    const result = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$ToolResponse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToolResponse"]({
                                        artifact: c.artifact,
                                        result: c.result,
                                        isError: c.isError
                                    });
                                    streamController.setResponse(result);
                                    controller.enqueue({
                                        type: "result",
                                        path: chunk.path,
                                        ...result
                                    });
                                }, (e)=>{
                                    const result = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$ToolResponse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToolResponse"]({
                                        result: String(e),
                                        isError: true
                                    });
                                    streamController.setResponse(result);
                                    controller.enqueue({
                                        type: "result",
                                        path: chunk.path,
                                        ...result
                                    });
                                });
                                if (promise) {
                                    toolCallPromises.set(toolCallId, promise);
                                }
                                break;
                            }
                        case "part-finish":
                            {
                                if (chunk.meta.type !== "tool-call") break;
                                const { toolCallId } = chunk.meta;
                                const toolCallPromise = toolCallPromises.get(toolCallId);
                                if (toolCallPromise) {
                                    toolCallPromise.then(()=>{
                                        toolCallPromises.delete(toolCallId);
                                        toolCallControllers.delete(toolCallId);
                                        controller.enqueue(chunk);
                                    });
                                } else {
                                    controller.enqueue(chunk);
                                }
                            }
                    }
                },
                async flush () {
                    await Promise.all(toolCallPromises.values());
                }
            });
            return readable.pipeThrough(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$utils$2f$stream$2f$AssistantMetaTransformStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AssistantMetaTransformStream"]()).pipeThrough(transform);
        });
    }
};
;
 //# sourceMappingURL=ToolExecutionStream.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/tool/toolResultStream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/core/tool/toolResultStream.ts
__turbopack_context__.s([
    "toolResultStream",
    ()=>toolResultStream,
    "unstable_runPendingTools",
    ()=>unstable_runPendingTools
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$ToolResponse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/tool/ToolResponse.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$ToolExecutionStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/tool/ToolExecutionStream.js [app-client] (ecmascript)");
;
;
var isStandardSchemaV1 = (schema)=>{
    return typeof schema === "object" && schema !== null && "~standard" in schema && schema["~standard"].version === 1;
};
function getToolResponse(tools, abortSignal, toolCall, human) {
    const tool = tools === null || tools === void 0 ? void 0 : tools[toolCall.toolName];
    if (!tool || !tool.execute) return void 0;
    const getResult = async (toolExecute)=>{
        let executeFn = toolExecute;
        if (isStandardSchemaV1(tool.parameters)) {
            let result2 = tool.parameters["~standard"].validate(toolCall.args);
            if (result2 instanceof Promise) result2 = await result2;
            if (result2.issues) {
                var _tool_experimental_onSchemaValidationError;
                executeFn = (_tool_experimental_onSchemaValidationError = tool.experimental_onSchemaValidationError) !== null && _tool_experimental_onSchemaValidationError !== void 0 ? _tool_experimental_onSchemaValidationError : ()=>{
                    throw new Error("Function parameter validation failed. ".concat(JSON.stringify(result2.issues)));
                };
            }
        }
        const result = await executeFn(toolCall.args, {
            toolCallId: toolCall.toolCallId,
            abortSignal,
            human: (payload)=>human(toolCall.toolCallId, payload)
        });
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$ToolResponse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToolResponse"].toResponse(result);
    };
    return getResult(tool.execute);
}
function getToolStreamResponse(tools, abortSignal, reader, context, human) {
    var _tools_context_toolName_streamCall, _tools_context_toolName;
    tools === null || tools === void 0 ? void 0 : (_tools_context_toolName = tools[context.toolName]) === null || _tools_context_toolName === void 0 ? void 0 : (_tools_context_toolName_streamCall = _tools_context_toolName.streamCall) === null || _tools_context_toolName_streamCall === void 0 ? void 0 : _tools_context_toolName_streamCall.call(_tools_context_toolName, reader, {
        toolCallId: context.toolCallId,
        abortSignal,
        human: (payload)=>human(context.toolCallId, payload)
    });
}
async function unstable_runPendingTools(message, tools, abortSignal, human) {
    for (const part of message.parts){
        if (part.type === "tool-call") {
            const promiseOrUndefined = getToolResponse(tools, abortSignal, part, human !== null && human !== void 0 ? human : async ()=>{
                throw new Error("Tool human input is not supported in this context");
            });
            if (promiseOrUndefined) {
                const result = await promiseOrUndefined;
                const updatedParts = message.parts.map((p)=>{
                    if (p.type === "tool-call" && p.toolCallId === part.toolCallId) {
                        return {
                            ...p,
                            state: "result",
                            ...result.artifact !== void 0 ? {
                                artifact: result.artifact
                            } : {},
                            result: result.result,
                            isError: result.isError
                        };
                    }
                    return p;
                });
                message = {
                    ...message,
                    parts: updatedParts,
                    content: updatedParts
                };
            }
        }
    }
    return message;
}
function toolResultStream(tools, abortSignal, human) {
    const toolsFn = typeof tools === "function" ? tools : ()=>tools;
    const abortSignalFn = typeof abortSignal === "function" ? abortSignal : ()=>abortSignal;
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$ToolExecutionStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToolExecutionStream"]({
        execute: (toolCall)=>getToolResponse(toolsFn(), abortSignalFn(), toolCall, human),
        streamCall: (param)=>{
            let { reader, ...context } = param;
            return getToolStreamResponse(toolsFn(), abortSignalFn(), reader, context, human);
        }
    });
}
;
 //# sourceMappingURL=toolResultStream.js.map
}),
"[project]/node_modules/assistant-stream/dist/core/tool/toolResultStream.js [app-client] (ecmascript) <export toolResultStream as unstable_toolResultStream>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "unstable_toolResultStream",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$toolResultStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toolResultStream"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$assistant$2d$stream$2f$dist$2f$core$2f$tool$2f$toolResultStream$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/assistant-stream/dist/core/tool/toolResultStream.js [app-client] (ecmascript)");
}),
]);

//# sourceMappingURL=node_modules_assistant-stream_dist_730e0ce7._.js.map